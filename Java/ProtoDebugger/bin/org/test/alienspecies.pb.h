// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alienspecies.proto

#ifndef PROTOBUF_alienspecies_2eproto__INCLUDED
#define PROTOBUF_alienspecies_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_alienspecies_2eproto();
void protobuf_AssignDesc_alienspecies_2eproto();
void protobuf_ShutdownFile_alienspecies_2eproto();

class Alien;
class Alien_Language;
class AlienSpecies;

enum Alien_PlanetType {
  Alien_PlanetType_AQUA = 0,
  Alien_PlanetType_DESERT = 1,
  Alien_PlanetType_CANOPY = 2
};
bool Alien_PlanetType_IsValid(int value);
const Alien_PlanetType Alien_PlanetType_PlanetType_MIN = Alien_PlanetType_AQUA;
const Alien_PlanetType Alien_PlanetType_PlanetType_MAX = Alien_PlanetType_CANOPY;
const int Alien_PlanetType_PlanetType_ARRAYSIZE = Alien_PlanetType_PlanetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Alien_PlanetType_descriptor();
inline const ::std::string& Alien_PlanetType_Name(Alien_PlanetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Alien_PlanetType_descriptor(), value);
}
inline bool Alien_PlanetType_Parse(
    const ::std::string& name, Alien_PlanetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alien_PlanetType>(
    Alien_PlanetType_descriptor(), name, value);
}
// ===================================================================

class Alien_Language : public ::google::protobuf::Message {
 public:
  Alien_Language();
  virtual ~Alien_Language();
  
  Alien_Language(const Alien_Language& from);
  
  inline Alien_Language& operator=(const Alien_Language& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alien_Language& default_instance();
  
  void Swap(Alien_Language* other);
  
  // implements Message ----------------------------------------------
  
  Alien_Language* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alien_Language& from);
  void MergeFrom(const Alien_Language& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string grammer = 1;
  inline bool has_grammer() const;
  inline void clear_grammer();
  static const int kGrammerFieldNumber = 1;
  inline const ::std::string& grammer() const;
  inline void set_grammer(const ::std::string& value);
  inline void set_grammer(const char* value);
  inline void set_grammer(const char* value, size_t size);
  inline ::std::string* mutable_grammer();
  inline ::std::string* release_grammer();
  
  // optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::tutorial::Alien_PlanetType type() const;
  inline void set_type(::tutorial::Alien_PlanetType value);
  
  // @@protoc_insertion_point(class_scope:tutorial.Alien.Language)
 private:
  inline void set_has_grammer();
  inline void clear_has_grammer();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* grammer_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_alienspecies_2eproto();
  friend void protobuf_AssignDesc_alienspecies_2eproto();
  friend void protobuf_ShutdownFile_alienspecies_2eproto();
  
  void InitAsDefaultInstance();
  static Alien_Language* default_instance_;
};
// -------------------------------------------------------------------

class Alien : public ::google::protobuf::Message {
 public:
  Alien();
  virtual ~Alien();
  
  Alien(const Alien& from);
  
  inline Alien& operator=(const Alien& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Alien& default_instance();
  
  void Swap(Alien* other);
  
  // implements Message ----------------------------------------------
  
  Alien* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alien& from);
  void MergeFrom(const Alien& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Alien_Language Language;
  
  typedef Alien_PlanetType PlanetType;
  static const PlanetType AQUA = Alien_PlanetType_AQUA;
  static const PlanetType DESERT = Alien_PlanetType_DESERT;
  static const PlanetType CANOPY = Alien_PlanetType_CANOPY;
  static inline bool PlanetType_IsValid(int value) {
    return Alien_PlanetType_IsValid(value);
  }
  static const PlanetType PlanetType_MIN =
    Alien_PlanetType_PlanetType_MIN;
  static const PlanetType PlanetType_MAX =
    Alien_PlanetType_PlanetType_MAX;
  static const int PlanetType_ARRAYSIZE =
    Alien_PlanetType_PlanetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PlanetType_descriptor() {
    return Alien_PlanetType_descriptor();
  }
  static inline const ::std::string& PlanetType_Name(PlanetType value) {
    return Alien_PlanetType_Name(value);
  }
  static inline bool PlanetType_Parse(const ::std::string& name,
      PlanetType* value) {
    return Alien_PlanetType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string species = 3;
  inline bool has_species() const;
  inline void clear_species();
  static const int kSpeciesFieldNumber = 3;
  inline const ::std::string& species() const;
  inline void set_species(const ::std::string& value);
  inline void set_species(const char* value);
  inline void set_species(const char* value, size_t size);
  inline ::std::string* mutable_species();
  inline ::std::string* release_species();
  
  // repeated .tutorial.Alien.Language tongue = 4;
  inline int tongue_size() const;
  inline void clear_tongue();
  static const int kTongueFieldNumber = 4;
  inline const ::tutorial::Alien_Language& tongue(int index) const;
  inline ::tutorial::Alien_Language* mutable_tongue(int index);
  inline ::tutorial::Alien_Language* add_tongue();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Alien_Language >&
      tongue() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::Alien_Language >*
      mutable_tongue();
  
  // @@protoc_insertion_point(class_scope:tutorial.Alien)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_species();
  inline void clear_has_species();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* species_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::Alien_Language > tongue_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_alienspecies_2eproto();
  friend void protobuf_AssignDesc_alienspecies_2eproto();
  friend void protobuf_ShutdownFile_alienspecies_2eproto();
  
  void InitAsDefaultInstance();
  static Alien* default_instance_;
};
// -------------------------------------------------------------------

class AlienSpecies : public ::google::protobuf::Message {
 public:
  AlienSpecies();
  virtual ~AlienSpecies();
  
  AlienSpecies(const AlienSpecies& from);
  
  inline AlienSpecies& operator=(const AlienSpecies& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlienSpecies& default_instance();
  
  void Swap(AlienSpecies* other);
  
  // implements Message ----------------------------------------------
  
  AlienSpecies* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlienSpecies& from);
  void MergeFrom(const AlienSpecies& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tutorial.Alien alien = 1;
  inline int alien_size() const;
  inline void clear_alien();
  static const int kAlienFieldNumber = 1;
  inline const ::tutorial::Alien& alien(int index) const;
  inline ::tutorial::Alien* mutable_alien(int index);
  inline ::tutorial::Alien* add_alien();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Alien >&
      alien() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::Alien >*
      mutable_alien();
  
  // @@protoc_insertion_point(class_scope:tutorial.AlienSpecies)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tutorial::Alien > alien_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_alienspecies_2eproto();
  friend void protobuf_AssignDesc_alienspecies_2eproto();
  friend void protobuf_ShutdownFile_alienspecies_2eproto();
  
  void InitAsDefaultInstance();
  static AlienSpecies* default_instance_;
};
// ===================================================================


// ===================================================================

// Alien_Language

// required string grammer = 1;
inline bool Alien_Language::has_grammer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alien_Language::set_has_grammer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alien_Language::clear_has_grammer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alien_Language::clear_grammer() {
  if (grammer_ != &::google::protobuf::internal::kEmptyString) {
    grammer_->clear();
  }
  clear_has_grammer();
}
inline const ::std::string& Alien_Language::grammer() const {
  return *grammer_;
}
inline void Alien_Language::set_grammer(const ::std::string& value) {
  set_has_grammer();
  if (grammer_ == &::google::protobuf::internal::kEmptyString) {
    grammer_ = new ::std::string;
  }
  grammer_->assign(value);
}
inline void Alien_Language::set_grammer(const char* value) {
  set_has_grammer();
  if (grammer_ == &::google::protobuf::internal::kEmptyString) {
    grammer_ = new ::std::string;
  }
  grammer_->assign(value);
}
inline void Alien_Language::set_grammer(const char* value, size_t size) {
  set_has_grammer();
  if (grammer_ == &::google::protobuf::internal::kEmptyString) {
    grammer_ = new ::std::string;
  }
  grammer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alien_Language::mutable_grammer() {
  set_has_grammer();
  if (grammer_ == &::google::protobuf::internal::kEmptyString) {
    grammer_ = new ::std::string;
  }
  return grammer_;
}
inline ::std::string* Alien_Language::release_grammer() {
  clear_has_grammer();
  if (grammer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grammer_;
    grammer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
inline bool Alien_Language::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alien_Language::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alien_Language::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alien_Language::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tutorial::Alien_PlanetType Alien_Language::type() const {
  return static_cast< ::tutorial::Alien_PlanetType >(type_);
}
inline void Alien_Language::set_type(::tutorial::Alien_PlanetType value) {
  GOOGLE_DCHECK(::tutorial::Alien_PlanetType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Alien

// required string name = 1;
inline bool Alien::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alien::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alien::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alien::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Alien::name() const {
  return *name_;
}
inline void Alien::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Alien::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Alien::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alien::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Alien::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 id = 2;
inline bool Alien::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alien::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alien::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alien::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Alien::id() const {
  return id_;
}
inline void Alien::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string species = 3;
inline bool Alien::has_species() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alien::set_has_species() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Alien::clear_has_species() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Alien::clear_species() {
  if (species_ != &::google::protobuf::internal::kEmptyString) {
    species_->clear();
  }
  clear_has_species();
}
inline const ::std::string& Alien::species() const {
  return *species_;
}
inline void Alien::set_species(const ::std::string& value) {
  set_has_species();
  if (species_ == &::google::protobuf::internal::kEmptyString) {
    species_ = new ::std::string;
  }
  species_->assign(value);
}
inline void Alien::set_species(const char* value) {
  set_has_species();
  if (species_ == &::google::protobuf::internal::kEmptyString) {
    species_ = new ::std::string;
  }
  species_->assign(value);
}
inline void Alien::set_species(const char* value, size_t size) {
  set_has_species();
  if (species_ == &::google::protobuf::internal::kEmptyString) {
    species_ = new ::std::string;
  }
  species_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alien::mutable_species() {
  set_has_species();
  if (species_ == &::google::protobuf::internal::kEmptyString) {
    species_ = new ::std::string;
  }
  return species_;
}
inline ::std::string* Alien::release_species() {
  clear_has_species();
  if (species_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = species_;
    species_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tutorial.Alien.Language tongue = 4;
inline int Alien::tongue_size() const {
  return tongue_.size();
}
inline void Alien::clear_tongue() {
  tongue_.Clear();
}
inline const ::tutorial::Alien_Language& Alien::tongue(int index) const {
  return tongue_.Get(index);
}
inline ::tutorial::Alien_Language* Alien::mutable_tongue(int index) {
  return tongue_.Mutable(index);
}
inline ::tutorial::Alien_Language* Alien::add_tongue() {
  return tongue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Alien_Language >&
Alien::tongue() const {
  return tongue_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Alien_Language >*
Alien::mutable_tongue() {
  return &tongue_;
}

// -------------------------------------------------------------------

// AlienSpecies

// repeated .tutorial.Alien alien = 1;
inline int AlienSpecies::alien_size() const {
  return alien_.size();
}
inline void AlienSpecies::clear_alien() {
  alien_.Clear();
}
inline const ::tutorial::Alien& AlienSpecies::alien(int index) const {
  return alien_.Get(index);
}
inline ::tutorial::Alien* AlienSpecies::mutable_alien(int index) {
  return alien_.Mutable(index);
}
inline ::tutorial::Alien* AlienSpecies::add_alien() {
  return alien_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::Alien >&
AlienSpecies::alien() const {
  return alien_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::Alien >*
AlienSpecies::mutable_alien() {
  return &alien_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Alien_PlanetType>() {
  return ::tutorial::Alien_PlanetType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_alienspecies_2eproto__INCLUDED
