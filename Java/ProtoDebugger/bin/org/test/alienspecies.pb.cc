// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "alienspecies.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* Alien_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alien_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alien_Language_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alien_Language_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Alien_PlanetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AlienSpecies_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlienSpecies_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_alienspecies_2eproto() {
  protobuf_AddDesc_alienspecies_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "alienspecies.proto");
  GOOGLE_CHECK(file != NULL);
  Alien_descriptor_ = file->message_type(0);
  static const int Alien_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, species_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, tongue_),
  };
  Alien_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alien_descriptor_,
      Alien::default_instance_,
      Alien_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alien));
  Alien_Language_descriptor_ = Alien_descriptor_->nested_type(0);
  static const int Alien_Language_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien_Language, grammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien_Language, type_),
  };
  Alien_Language_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alien_Language_descriptor_,
      Alien_Language::default_instance_,
      Alien_Language_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien_Language, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alien_Language, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alien_Language));
  Alien_PlanetType_descriptor_ = Alien_descriptor_->enum_type(0);
  AlienSpecies_descriptor_ = file->message_type(1);
  static const int AlienSpecies_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienSpecies, alien_),
  };
  AlienSpecies_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlienSpecies_descriptor_,
      AlienSpecies::default_instance_,
      AlienSpecies_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienSpecies, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienSpecies, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlienSpecies));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_alienspecies_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alien_descriptor_, &Alien::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alien_Language_descriptor_, &Alien_Language::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlienSpecies_descriptor_, &AlienSpecies::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_alienspecies_2eproto() {
  delete Alien::default_instance_;
  delete Alien_reflection_;
  delete Alien_Language::default_instance_;
  delete Alien_Language_reflection_;
  delete AlienSpecies::default_instance_;
  delete AlienSpecies_reflection_;
}

void protobuf_AddDesc_alienspecies_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022alienspecies.proto\022\010tutorial\"\331\001\n\005Alien"
    "\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\017\n\007species\030\003 "
    "\001(\t\022(\n\006tongue\030\004 \003(\0132\030.tutorial.Alien.Lan"
    "guage\032K\n\010Language\022\017\n\007grammer\030\001 \002(\t\022.\n\004ty"
    "pe\030\002 \001(\0162\032.tutorial.Alien.PlanetType:\004AQ"
    "UA\".\n\nPlanetType\022\010\n\004AQUA\020\000\022\n\n\006DESERT\020\001\022\n"
    "\n\006CANOPY\020\002\".\n\014AlienSpecies\022\036\n\005alien\030\001 \003("
    "\0132\017.tutorial.AlienB)\n\024com.example.tutori"
    "alB\021AlienSpeciesProto", 341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "alienspecies.proto", &protobuf_RegisterTypes);
  Alien::default_instance_ = new Alien();
  Alien_Language::default_instance_ = new Alien_Language();
  AlienSpecies::default_instance_ = new AlienSpecies();
  Alien::default_instance_->InitAsDefaultInstance();
  Alien_Language::default_instance_->InitAsDefaultInstance();
  AlienSpecies::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_alienspecies_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_alienspecies_2eproto {
  StaticDescriptorInitializer_alienspecies_2eproto() {
    protobuf_AddDesc_alienspecies_2eproto();
  }
} static_descriptor_initializer_alienspecies_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Alien_PlanetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alien_PlanetType_descriptor_;
}
bool Alien_PlanetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Alien_PlanetType Alien::AQUA;
const Alien_PlanetType Alien::DESERT;
const Alien_PlanetType Alien::CANOPY;
const Alien_PlanetType Alien::PlanetType_MIN;
const Alien_PlanetType Alien::PlanetType_MAX;
const int Alien::PlanetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Alien_Language::kGrammerFieldNumber;
const int Alien_Language::kTypeFieldNumber;
#endif  // !_MSC_VER

Alien_Language::Alien_Language()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alien_Language::InitAsDefaultInstance() {
}

Alien_Language::Alien_Language(const Alien_Language& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alien_Language::SharedCtor() {
  _cached_size_ = 0;
  grammer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alien_Language::~Alien_Language() {
  SharedDtor();
}

void Alien_Language::SharedDtor() {
  if (grammer_ != &::google::protobuf::internal::kEmptyString) {
    delete grammer_;
  }
  if (this != default_instance_) {
  }
}

void Alien_Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alien_Language::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alien_Language_descriptor_;
}

const Alien_Language& Alien_Language::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alienspecies_2eproto();  return *default_instance_;
}

Alien_Language* Alien_Language::default_instance_ = NULL;

Alien_Language* Alien_Language::New() const {
  return new Alien_Language;
}

void Alien_Language::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grammer()) {
      if (grammer_ != &::google::protobuf::internal::kEmptyString) {
        grammer_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alien_Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string grammer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grammer().data(), this->grammer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tutorial::Alien_PlanetType_IsValid(value)) {
            set_type(static_cast< ::tutorial::Alien_PlanetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alien_Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string grammer = 1;
  if (has_grammer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammer().data(), this->grammer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->grammer(), output);
  }
  
  // optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alien_Language::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string grammer = 1;
  if (has_grammer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammer().data(), this->grammer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grammer(), target);
  }
  
  // optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alien_Language::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string grammer = 1;
    if (has_grammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grammer());
    }
    
    // optional .tutorial.Alien.PlanetType type = 2 [default = AQUA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alien_Language::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alien_Language* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alien_Language*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alien_Language::MergeFrom(const Alien_Language& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grammer()) {
      set_grammer(from.grammer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alien_Language::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alien_Language::CopyFrom(const Alien_Language& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alien_Language::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Alien_Language::Swap(Alien_Language* other) {
  if (other != this) {
    std::swap(grammer_, other->grammer_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alien_Language::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alien_Language_descriptor_;
  metadata.reflection = Alien_Language_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Alien::kNameFieldNumber;
const int Alien::kIdFieldNumber;
const int Alien::kSpeciesFieldNumber;
const int Alien::kTongueFieldNumber;
#endif  // !_MSC_VER

Alien::Alien()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alien::InitAsDefaultInstance() {
}

Alien::Alien(const Alien& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alien::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  species_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alien::~Alien() {
  SharedDtor();
}

void Alien::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (species_ != &::google::protobuf::internal::kEmptyString) {
    delete species_;
  }
  if (this != default_instance_) {
  }
}

void Alien::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alien::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alien_descriptor_;
}

const Alien& Alien::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alienspecies_2eproto();  return *default_instance_;
}

Alien* Alien::default_instance_ = NULL;

Alien* Alien::New() const {
  return new Alien;
}

void Alien::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    if (has_species()) {
      if (species_ != &::google::protobuf::internal::kEmptyString) {
        species_->clear();
      }
    }
  }
  tongue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alien::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_species;
        break;
      }
      
      // optional string species = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_species:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_species()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->species().data(), this->species().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tongue;
        break;
      }
      
      // repeated .tutorial.Alien.Language tongue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tongue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tongue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tongue;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alien::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string species = 3;
  if (has_species()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->species().data(), this->species().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->species(), output);
  }
  
  // repeated .tutorial.Alien.Language tongue = 4;
  for (int i = 0; i < this->tongue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tongue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alien::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string species = 3;
  if (has_species()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->species().data(), this->species().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->species(), target);
  }
  
  // repeated .tutorial.Alien.Language tongue = 4;
  for (int i = 0; i < this->tongue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tongue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alien::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string species = 3;
    if (has_species()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->species());
    }
    
  }
  // repeated .tutorial.Alien.Language tongue = 4;
  total_size += 1 * this->tongue_size();
  for (int i = 0; i < this->tongue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tongue(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alien::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alien* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alien*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alien::MergeFrom(const Alien& from) {
  GOOGLE_CHECK_NE(&from, this);
  tongue_.MergeFrom(from.tongue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_species()) {
      set_species(from.species());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alien::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alien::CopyFrom(const Alien& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alien::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tongue_size(); i++) {
    if (!this->tongue(i).IsInitialized()) return false;
  }
  return true;
}

void Alien::Swap(Alien* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(species_, other->species_);
    tongue_.Swap(&other->tongue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alien::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alien_descriptor_;
  metadata.reflection = Alien_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlienSpecies::kAlienFieldNumber;
#endif  // !_MSC_VER

AlienSpecies::AlienSpecies()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlienSpecies::InitAsDefaultInstance() {
}

AlienSpecies::AlienSpecies(const AlienSpecies& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlienSpecies::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlienSpecies::~AlienSpecies() {
  SharedDtor();
}

void AlienSpecies::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlienSpecies::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlienSpecies::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienSpecies_descriptor_;
}

const AlienSpecies& AlienSpecies::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_alienspecies_2eproto();  return *default_instance_;
}

AlienSpecies* AlienSpecies::default_instance_ = NULL;

AlienSpecies* AlienSpecies::New() const {
  return new AlienSpecies;
}

void AlienSpecies::Clear() {
  alien_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlienSpecies::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tutorial.Alien alien = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alien:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alien()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_alien;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlienSpecies::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tutorial.Alien alien = 1;
  for (int i = 0; i < this->alien_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alien(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlienSpecies::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tutorial.Alien alien = 1;
  for (int i = 0; i < this->alien_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alien(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlienSpecies::ByteSize() const {
  int total_size = 0;
  
  // repeated .tutorial.Alien alien = 1;
  total_size += 1 * this->alien_size();
  for (int i = 0; i < this->alien_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alien(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlienSpecies::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlienSpecies* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlienSpecies*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlienSpecies::MergeFrom(const AlienSpecies& from) {
  GOOGLE_CHECK_NE(&from, this);
  alien_.MergeFrom(from.alien_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlienSpecies::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlienSpecies::CopyFrom(const AlienSpecies& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlienSpecies::IsInitialized() const {
  
  for (int i = 0; i < alien_size(); i++) {
    if (!this->alien(i).IsInitialized()) return false;
  }
  return true;
}

void AlienSpecies::Swap(AlienSpecies* other) {
  if (other != this) {
    alien_.Swap(&other->alien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlienSpecies::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlienSpecies_descriptor_;
  metadata.reflection = AlienSpecies_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
